# 🧑‍💼 Employee Service

**Employee Service** is a Spring Boot microservice responsible for managing employee records, department assignments, and enforcing role-based access control (`ADMIN`, `EMPLOYEE`). It provides RESTful APIs designed to integrate with HR, Payroll, and Authentication systems in a microservices architecture.

---

## 🚀 Features

- ✅ Create, update, delete employees (ADMIN only)
- ✅ View own profile (EMPLOYEE)
- ✅ Assign departments to employees
- ✅ Secure APIs with role-based access control
- ✅ Uses DTOs to expose clean and secure data
- ✅ In-memory H2 database for local development
- ✅ Ready for integration in a microservice ecosystem

---

## ⚙️ Tech Stack

- Java 17
- Spring Boot
- Spring Data JPA
- Spring Security
- Mysql database
- Maven

---

## 📁 Project Structure

employee-service/
├── controller/ # REST API endpoints
├── service/ # Business logic layer
├── repository/ # JPA interfaces
├── entity/ # JPA entity classes (Employee, Department)
├── dto/ # Data Transfer Objects
├── config/ # Security config, CORS
└── resources/
└── application.properties





## 🛠️ How to Run

### 📦 Prerequisites

- Java 17+
- Maven 3.8+

### ▶️ Run the app

```bash
# Clone the repo
git clone https://github.com/your-org/employee-service.git
cd employee-service

# Run the app
mvn spring-boot:run
The app will start on:
👉 http://localhost:8080

🧰 Configuration
application.properties
properties
Copy
Edit
spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.driver-class-name=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=
spring.h2.console.enabled=true

spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
📥 H2 Console: http://localhost:8080/h2-console
🔑 JDBC URL: jdbc:h2:mem:testdb

🧪 Test the API
You can test the service with:

🧪 Postman or curl

🧪 Swagger (optional – add springdoc-openapi dependency)

📦 Build Artifact
Run this to package the app:


mvn clean package
Output JAR: target/employee-service-1.0.0.jar

🔄 CI/CD with GitHub Actions
The project includes a simple CI workflow at:

.github/workflows/ci.yml
It will:
Build the app
Run tests

Upload the JAR as a build artifact

🧭 Future Enhancements
 JWT-based authentication

 Docker & Docker Compose support
 Department as a standalone service
 Integration with API Gateway & Service Registry
 Centralized configuration with Spring Cloud Config

📄 License
This project is licensed under the MIT License © 2025 [Solomon]